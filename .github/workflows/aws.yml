name: Deploy to Amazon ECS

on:
  push:
    branches: ["main"]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::124355661462:role/github-actions-role
          aws-region: us-east-1
      #- name: Test AWS connection
      #  run: aws sts get-caller-identity

      # Para configuração via secrets
      #  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #  aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Get next version tag
        id: version
        run: |
          REPO_NAME=poc-github
          REGION=us-east-1

          # Busca todas as tags válidas (vX.Y.Z) e pega a mais recente
          LAST_TAG=$(aws ecr describe-images --repository-name "$REPO_NAME" --region "$REGION" \
            --query "imageDetails[?imageTags != null].imageTags[]" --output json \
            | jq -r '.[]' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)

          # Se não existir nenhuma tag, define v0.0.0
          if [ -z "$LAST_TAG" ]; then
            LAST_TAG="v0.0.0"
          fi

          echo "Última tag encontrada: $LAST_TAG"

          # Incrementa o patch (último número)
          PREFIX=v
          VERSION=${LAST_TAG#$PREFIX}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH+1))
          NEW_TAG="${PREFIX}${MAJOR}.${MINOR}.${PATCH}"

          # Exporta para os próximos passos
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          AWS_REGION: us-east-1 # set this to your preferred AWS region, e.g. us-west-1
          ECR_REPOSITORY: poc-github # set this to your Amazon ECR repository name
          #IMAGE_TAG: ${{ gitHub.sha }}   # tag com o SHA do commit
          #IMAGE_TAG: v0.0.1              # tag com versão v0.0.1 com o SHA do commit
          IMAGE_TAG: ${{ env.NEW_TAG }}   # tag automática

        run: |

          # Build a docker container and
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

          # push it to ECR so that it can
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # be deployed to ECS.
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    #- name: Fill in the new image ID in the Amazon ECS task definition
    #  id: task-def
    #  uses: aws-actions/amazon-ecs-render-task-definition@v1
    #  with:
    #    task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #    container-name: ${{ env.CONTAINER_NAME }}
    #    image: ${{ steps.build-image.outputs.image }}

    #- name: Deploy Amazon ECS task definition
    #  uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #  with:
    #    task-definition: ${{ steps.task-def.outputs.task-definition }}
    #    service: ${{ env.ECS_SERVICE }}
    #    cluster: ${{ env.ECS_CLUSTER }}
    #    wait-for-service-stability: true
