name: Deploy to Amazon ECR

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy para ECR
    runs-on: ubuntu-latest

    steps:
      # ==============================
      # üß© Etapa 1: Checkout do c√≥digo
      # ==============================
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      # =========================================
      # üîê Etapa 2: Configura credenciais AWS
      # =========================================
      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::899360400100:role/github-actions-role
          aws-region: us-east-1

      # - name: Executar build no CodeBuild
      #   run: |
      #     aws codebuild start-build \
      #       --project-name poc-git-hub \
      #       --region us-east-1

      # =========================================
      # üîì Etapa 3: Login no Amazon ECR
      # =========================================
      - name: Login no Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # =========================================
      # üî¢ Etapa 4: Gerar automaticamente a pr√≥xima vers√£o
      # =========================================
      - name: Gerar pr√≥xima tag de vers√£o
        id: version
        run: |
          REPO_NAME="gitub-poc"
          REGION="us-east-1"
          echo "üîç Buscando √∫ltima tag v√°lida no ECR ($REPO_NAME em $REGION)..."

          TAGS=$(aws ecr describe-images \
            --repository-name "$REPO_NAME" \
            --region "$REGION" \
            --query 'imageDetails[].imageTags' \
            --output json | jq -r '.[]? | .[]? | select(test("^v[0-9]+\\.[0-9]+\\.[0-9]+$"))' | sort -V || true)

          if [ -z "$TAGS" ]; then
            echo "Nenhuma tag encontrada ‚Äî iniciando em v0.0.1"
            NEW_TAG="v0.0.1"
          else
            LAST_TAG=$(echo "$TAGS" | tail -n 1)
            echo "‚úÖ √öltima tag encontrada: $LAST_TAG"
            PREFIX="v"
            VERSION=${LAST_TAG#$PREFIX}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            PATCH=$((PATCH+1))
            NEW_TAG="${PREFIX}${MAJOR}.${MINOR}.${PATCH}"
          fi

          echo "Nova tag gerada: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> tag.env

      # =========================================
      # üíæ Etapa 5: Carregar a tag gerada no ambiente
      # =========================================
      - name: Carregar tag gerada
        run: |
          source tag.env
          echo "Usando tag: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      # =========================================
      # üê≥ Etapa 6: Build e Push da imagem Docker
      # =========================================
      - name: Build e Push da imagem Docker
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: gitub-poc
        run: |
          echo "Construindo imagem: $ECR_REGISTRY/$ECR_REPOSITORY:$NEW_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$NEW_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$NEW_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "Fazendo push da imagem..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$NEW_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "Imagem enviada com sucesso!"


    #- name: Fill in the new image ID in the Amazon ECS task definition
    #  id: task-def
    #  uses: aws-actions/amazon-ecs-render-task-definition@v1
    #  with:
    #    task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #    container-name: ${{ env.CONTAINER_NAME }}
    #    image: ${{ steps.build-image.outputs.image }}
    
    #- name: Deploy Amazon ECS task definition
    #  uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #  with:
    #    task-definition: ${{ steps.task-def.outputs.task-definition }}
    #    service: ${{ env.ECS_SERVICE }}
    #    cluster: ${{ env.ECS_CLUSTER }}
    #    wait-for-service-stability: true


