name: Deploy to Amazon ECR

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::124355661462:role/github-actions-role
          aws-region: us-east-1

      # =========================================
      # üîê Login no Amazon ECR
      # =========================================
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # =========================================
      # üî¢ Gerar automaticamente a pr√≥xima vers√£o
      # =========================================
      - name: Generate next version tag
        id: version
        run: |
          REPO_NAME="poc-github"
          REGION="us-east-1"
          echo "üîç Buscando √∫ltima tag v√°lida no ECR ($REPO_NAME em $REGION)..."

          TAGS=$(aws ecr describe-images \
            --repository-name "$REPO_NAME" \
            --region "$REGION" \
            --query 'imageDetails[].imageTags' \
            --output json | jq -r '.[]? | .[]? | select(test("^v[0-9]+\\.[0-9]+\\.[0-9]+$"))' | sort -V || true)

          if [ -z "$TAGS" ]; then
            echo "‚ö†Ô∏è Nenhuma tag encontrada ‚Äî iniciando em v0.0.1"
            NEW_TAG="v0.0.1"
          else
            LAST_TAG=$(echo "$TAGS" | tail -n 1)
            echo "‚úÖ √öltima tag encontrada: $LAST_TAG"
            PREFIX="v"
            VERSION=${LAST_TAG#$PREFIX}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            PATCH=$((PATCH+1))
            NEW_TAG="${PREFIX}${MAJOR}.${MINOR}.${PATCH}"
          fi

          echo "üöÄ Nova tag gerada: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "::set-output name=tag::$NEW_TAG"

      # =========================================
      # üê≥ Build, tag e push para o ECR
      # =========================================
      - name: Build and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: poc-github
          AWS_REGION: us-east-1
          IMAGE_TAG: ${{ steps.version.outputs.tag }}
        run: |
          echo "üèóÔ∏è  Construindo imagem: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "üì§ Enviando imagem para o ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "‚úÖ Imagem enviada: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"




    #- name: Fill in the new image ID in the Amazon ECS task definition
    #  id: task-def
    #  uses: aws-actions/amazon-ecs-render-task-definition@v1
    #  with:
    #    task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #    container-name: ${{ env.CONTAINER_NAME }}
    #    image: ${{ steps.build-image.outputs.image }}

    #- name: Deploy Amazon ECS task definition
    #  uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #  with:
    #    task-definition: ${{ steps.task-def.outputs.task-definition }}
    #    service: ${{ env.ECS_SERVICE }}
    #    cluster: ${{ env.ECS_CLUSTER }}
    #    wait-for-service-stability: true
